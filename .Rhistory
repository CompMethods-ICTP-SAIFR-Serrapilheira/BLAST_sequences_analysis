t <- t + dt
event <- runif(n = 1)
if(event < Decrease) {i <- i -1}
if(event > Decrease && event < (Decrease + Increase)) {i <- i + 1}
if(event > (Decrease + Increase)) {i <- i}
}
t
i
while(Decrease != 0 && Increase != 0){
t <- t + dt
event <- runif(n = 1)
if(event < Decrease) {i <- i -1}
if(event > Decrease && event < (Decrease + Increase)) {i <- i + 1}
if(event > (Decrease + Increase)) {i <- i}
}
time <- c()
iproportion <- c()
time[1] <- 0
iproportion[1] <- 40
N <- 100
i <- 40 # Number of individuals with A allele
dt <- 20/N # Assuming a generation time of E. coli
t <- 0
cont <- 1
# Let's define our probabilities
Decrease <- ((N-i)/N) * (i/N)
Increase <- (i/N) * ((N-i)/N)
Remain <- 1 - (2 * ((i/N) * ((N-i)/N)))
time <- c()
iproportion <- c()
time[1] <- 0
iproportion[1] <- 40
while(Decrease != 0 && Increase != 0){
cont <- cont + 1
time[cont] <- time[cont-1] + dt
event <- runif(n = 1)
if(event < Decrease) {iproportion[cont] <- iproportion[cont-1] -1}
if(event > Decrease && event < (Decrease + Increase)) {iproportion[cont] <- iproportion[cont-1] + 1}
if(event > (Decrease + Increase)) {iproportion[cont] <- i}
}
# Defining the initial conditions
N <- 100
i <- 40 # Number of individuals with A allele
dt <- 20/N # Assuming a generation time of E. coli
t <- 0
cont <- 1
# Let's define our probabilities
time <- c()
iproportion <- c()
time[1] <- 0
iproportion[1] <- 40
while(Decrease != 0 && Increase != 0){
cont <- cont + 1
Decrease <- ((N-iproportion[cont-1])/N) * (iproportion[cont-1]/N)
Increase <- (iproportion[cont-1]/N) * ((N-iproportion[cont-1])/N)
Remain <- 1 - (2 * ((iproportion[cont-1]/N) * ((N-iproportion[cont-1])/N)))
time[cont] <- time[cont-1] + dt
event <- runif(n = 1)
if(event < Decrease) {iproportion[cont] <- iproportion[cont-1] -1}
if(event > Decrease && event < (Decrease + Increase)) {iproportion[cont] <- iproportion[cont-1] + 1}
if(event > (Decrease + Increase)) {iproportion[cont] <- i}
}
Decrease <- ((N-iproportion[1])/N) * (iproportion[1]/N)
Increase <- (iproportion[1]/N) * ((N-iproportion[1])/N)
Remain <- 1 - (2 * ((iproportion[1]/N) * ((N-iproportion[1])/N)))
while(Decrease != 0 && Increase != 0){
cont <- cont + 1
Decrease <- ((N-iproportion[cont-1])/N) * (iproportion[cont-1]/N)
Increase <- (iproportion[cont-1]/N) * ((N-iproportion[cont-1])/N)
Remain <- 1 - (2 * ((iproportion[cont-1]/N) * ((N-iproportion[cont-1])/N)))
time[cont] <- time[cont-1] + dt
event <- runif(n = 1)
if(event < Decrease) {iproportion[cont] <- iproportion[cont-1] -1}
if(event > Decrease && event < (Decrease + Increase)) {iproportion[cont] <- iproportion[cont-1] + 1}
if(event > (Decrease + Increase)) {iproportion[cont] <- i}
}
probabilities <- function(N, i){
Decrease <- ((N-i)/N) * (i/N)
Increase <- (i/N) * ((N-i)/N)
Remain <- 1 - (2 * ((i/N) * ((N-i)/N)))
return(list(Decrease, Increase, Remain))
}
N <- 100
i <- 40 # Number of individuals with A allele
dt <- 20/N # Assuming a generation time of E. coli
t <- 0
time[1] <- 0
iproportion[1] <- 40
N <- 100
i <- 40 # Number of individuals with A allele
dt <- 20/N # Assuming a generation time of E. coli
t <- 0
cont <- 1
# Let's define our probabilities
time <- c()
iproportion <- c()
time[1] <- 0
iproportion[1] <- 40
probabilities
probabilities()
probabilities(N, i)
probabilities(N, i)$Decrease
time
iproportion
while(cont == 5){
time[cont+1] <- time[cont] + dt
Decrease  <- probabilities(N, iproportion[cont])[[1]]
Increase  <- probabilities(N, iproportion[cont])[[2]]
Reamin    <- probabilities(N, iproportion[cont])[[3]]
event <- runif(n = 1)
if(event < Decrease) {iproportion[cont+1] <- iproportion[cont] -1}
if(event > Decrease && event < (Decrease + Increase)) {iproportion[cont+1] <- iproportion[cont] + 1}
if(event > (Decrease + Increase)) {iproportion[cont+1] <- i}
cont <- cont + 1
}
time
while(cont < 5){
time[cont+1] <- time[cont] + dt
Decrease  <- probabilities(N, iproportion[cont])[[1]]
Increase  <- probabilities(N, iproportion[cont])[[2]]
Reamin    <- probabilities(N, iproportion[cont])[[3]]
event <- runif(n = 1)
if(event < Decrease) {iproportion[cont+1] <- iproportion[cont] -1}
if(event > Decrease && event < (Decrease + Increase)) {iproportion[cont+1] <- iproportion[cont] + 1}
if(event > (Decrease + Increase)) {iproportion[cont+1] <- i}
cont <- cont + 1
}
time
iproportion
probabilities <- function(N, i){
Decrease <- ((N-i)/N) * (i/N)
Increase <- (i/N) * ((N-i)/N)
Remain <- 1 - (2 * ((i/N) * ((N-i)/N)))
return(list(Decrease, Increase, Remain))
}
# Defining the initial conditions
N <- 50
i <- 40 # Number of individuals with A allele
dt <- 20/N # Assuming a generation time of E. coli
t <- 0
cont <- 1
# Let's define our probabilities
time <- c()
iproportion <- c()
time[1] <- 0
iproportion[1] <- 40
while(cont < 5){
time[cont+1] <- time[cont] + dt
Decrease  <- probabilities(N, iproportion[cont])[[1]]
Increase  <- probabilities(N, iproportion[cont])[[2]]
Reamin    <- probabilities(N, iproportion[cont])[[3]]
event <- runif(n = 1)
if(event < Decrease) {iproportion[cont+1] <- iproportion[cont] -1}
if(event > Decrease && event < (Decrease + Increase)) {iproportion[cont+1] <- iproportion[cont] + 1}
if(event > (Decrease + Increase)) {iproportion[cont+1] <- i}
cont <- cont + 1
}
iproportion
while(cont < 100){
time[cont+1] <- time[cont] + dt
Decrease  <- probabilities(N, iproportion[cont])[[1]]
Increase  <- probabilities(N, iproportion[cont])[[2]]
Reamin    <- probabilities(N, iproportion[cont])[[3]]
event <- runif(n = 1)
if(event < Decrease) {iproportion[cont+1] <- iproportion[cont] -1}
if(event > Decrease && event < (Decrease + Increase)) {iproportion[cont+1] <- iproportion[cont] + 1}
if(event > (Decrease + Increase)) {iproportion[cont+1] <- i}
cont <- cont + 1
}
iproportion
probabilities <- function(N, i){
Decrease <- ((N-i)/N) * (i/N)
Increase <- (i/N) * ((N-i)/N)
Remain <- 1 - (2 * ((i/N) * ((N-i)/N)))
return(list(Decrease, Increase, Remain))
}
# Defining the initial conditions
N <- 10
i <- 3 # Number of individuals with A allele
dt <- 20/N # Assuming a generation time of E. coli
t <- 0
cont <- 1
# Let's define our probabilities
time <- c()
iproportion <- c()
time[1] <- 0
iproportion[1] <- 40
while(cont < 100){
time[cont+1] <- time[cont] + dt
Decrease  <- probabilities(N, iproportion[cont])[[1]]
Increase  <- probabilities(N, iproportion[cont])[[2]]
Reamin    <- probabilities(N, iproportion[cont])[[3]]
event <- runif(n = 1)
if(event < Decrease) {iproportion[cont+1] <- iproportion[cont] -1}
if(event > Decrease && event < (Decrease + Increase)) {iproportion[cont+1] <- iproportion[cont] + 1}
if(event > (Decrease + Increase)) {iproportion[cont+1] <- i}
cont <- cont + 1
}
iproportion
while(cont < 600){
time[cont+1] <- time[cont] + dt
Decrease  <- probabilities(N, iproportion[cont])[[1]]
Increase  <- probabilities(N, iproportion[cont])[[2]]
Reamin    <- probabilities(N, iproportion[cont])[[3]]
event <- runif(n = 1)
if(event < Decrease) {iproportion[cont+1] <- iproportion[cont] -1}
if(event > Decrease && event < (Decrease + Increase)) {iproportion[cont+1] <- iproportion[cont] + 1}
if(event > (Decrease + Increase)) {iproportion[cont+1] <- i}
cont <- cont + 1
}
iproportion
probabilities <- function(N, i){
Decrease <- ((N-i)/N) * (i/N)
Increase <- (i/N) * ((N-i)/N)
Remain <- 1 - (2 * ((i/N) * ((N-i)/N)))
return(list(Decrease, Increase, Remain))
}
# Defining the initial conditions
N <- 50
i <- 40 # Number of individuals with A allele
dt <- 20/N # Assuming a generation time of E. coli
t <- 0
cont <- 1
# Let's define our probabilities
time <- c()
iproportion <- c()
time[1] <- 0
iproportion[1] <- 40
while(cont < 600){
time[cont+1] <- time[cont] + dt
Decrease  <- probabilities(N, iproportion[cont])[[1]]
Increase  <- probabilities(N, iproportion[cont])[[2]]
Reamin    <- probabilities(N, iproportion[cont])[[3]]
event <- runif(n = 1)
if(event < Decrease) {iproportion[cont+1] <- iproportion[cont] -1}
if(event > Decrease && event < (Decrease + Increase)) {iproportion[cont+1] <- iproportion[cont] + 1}
if(event > (Decrease + Increase)) {iproportion[cont+1] <- i}
cont <- cont + 1
}
iproportion
time
probabilities <- function(N, i){
Decrease <- ((N-i)/N) * (i/N)
Increase <- (i/N) * ((N-i)/N)
Remain <- 1 - (2 * ((i/N) * ((N-i)/N)))
return(list(Decrease, Increase, Remain))
}
# Defining the initial conditions
N <- 50
i <- 40 # Number of individuals with A allele
dt <- 20/N # Assuming a generation time of E. coli
t <- 0
cont <- 1
# Let's define our probabilities
time <- c()
iproportion <- c()
time[1] <- 0
iproportion[1] <- 40
while(cont < 600){
time[cont+1] <- time[cont] + dt
Decrease  <- probabilities(N, iproportion[cont])[[1]]
Increase  <- probabilities(N, iproportion[cont])[[2]]
Reamin    <- probabilities(N, iproportion[cont])[[3]]
event <- runif(n = 1)
if(event < Decrease) {iproportion[cont+1] <- iproportion[cont] -1}
if(event > Decrease && event < (Decrease + Increase)) {iproportion[cont+1] <- iproportion[cont] + 1}
if(event > (Decrease + Increase)) {iproportion[cont+1] <- iproportion[cont]}
cont <- cont + 1
}
iproportion
probabilities <- function(N, i){
Decrease <- ((N-i)/N) * (i/N)
Increase <- (i/N) * ((N-i)/N)
Remain <- 1 - (2 * ((i/N) * ((N-i)/N)))
return(list(Decrease, Increase, Remain))
}
# Defining the initial conditions
N <- 50
i <- 40 # Number of individuals with A allele
dt <- 20/N # Assuming a generation time of E. coli
t <- 0
cont <- 1
# Let's define our probabilities
time <- c()
iproportion <- c()
time[1] <- 0
iproportion[1] <- 40
while(cont < 900){
time[cont+1] <- time[cont] + dt
Decrease  <- probabilities(N, iproportion[cont])[[1]]
Increase  <- probabilities(N, iproportion[cont])[[2]]
Reamin    <- probabilities(N, iproportion[cont])[[3]]
event <- runif(n = 1)
if(event < Decrease) {iproportion[cont+1] <- iproportion[cont] -1}
if(event > Decrease && event < (Decrease + Increase)) {iproportion[cont+1] <- iproportion[cont] + 1}
if(event > (Decrease + Increase)) {iproportion[cont+1] <- iproportion[cont]}
cont <- cont + 1
}
iproportion
Reamin
Increase
Decrease
probabilities <- function(N, i){
Decrease <- ((N-i)/N) * (i/N)
Increase <- (i/N) * ((N-i)/N)
Remain <- 1 - (2 * ((i/N) * ((N-i)/N)))
return(list(Decrease, Increase, Remain))
}
# Defining the initial conditions
N <- 50
i <- 40 # Number of individuals with A allele
dt <- 20/N # Assuming a generation time of E. coli
t <- 0
cont <- 1
# Let's define our probabilities
time <- c()
iproportion <- c()
time[1] <- 0
iproportion[1] <- 40
while(Decrease != 0 && Increase != 0){
time[cont+1] <- time[cont] + dt
Decrease  <- probabilities(N, iproportion[cont])[[1]]
Increase  <- probabilities(N, iproportion[cont])[[2]]
Reamin    <- probabilities(N, iproportion[cont])[[3]]
event <- runif(n = 1)
if(event < Decrease) {iproportion[cont+1] <- iproportion[cont] -1}
if(event > Decrease && event < (Decrease + Increase)) {iproportion[cont+1] <- iproportion[cont] + 1}
if(event > (Decrease + Increase)) {iproportion[cont+1] <- iproportion[cont]}
cont <- cont + 1
}
t
tiem
time
time
while(Decrease != 0 && Increase != 0){
time[cont+1] <- time[cont] + dt
Decrease  <- probabilities(N, iproportion[cont])[[1]]
Increase  <- probabilities(N, iproportion[cont])[[2]]
Reamin    <- probabilities(N, iproportion[cont])[[3]]
event <- runif(n = 1)
if(event < Decrease) {iproportion[cont+1] <- iproportion[cont] -1}
if(event > Decrease && event < (Decrease + Increase)) {iproportion[cont+1] <- iproportion[cont] + 1}
if(event > (Decrease + Increase)) {iproportion[cont+1] <- iproportion[cont]}
cont <- cont + 1
}
time
iproportion
robabilities <- function(N, i){
Decrease <- ((N-i)/N) * (i/N)
Increase <- (i/N) * ((N-i)/N)
Remain <- 1 - (2 * ((i/N) * ((N-i)/N)))
return(list(Decrease, Increase, Remain))
}
# Defining the initial conditions
N <- 50
i <- 40 # Number of individuals with A allele
dt <- 20/N # Assuming a generation time of E. coli
t <- 0
cont <- 1
# Let's define our probabilities
time <- c()
iproportion <- c()
time[1] <- 0
iproportion[1] <- 40
while(Decrease != 0 && Increase != 0){
time[cont+1] <- time[cont] + dt
Decrease  <- probabilities(N, iproportion[cont])[[1]]
Increase  <- probabilities(N, iproportion[cont])[[2]]
Reamin    <- probabilities(N, iproportion[cont])[[3]]
event <- runif(n = 1)
if(event < Decrease) {iproportion[cont+1] <- iproportion[cont] -1}
if(event > Decrease && event < (Decrease + Increase)) {iproportion[cont+1] <- iproportion[cont] + 1}
if(event > (Decrease + Increase)) {iproportion[cont+1] <- iproportion[cont]}
cont <- cont + 1
}
iproportion
Decrease
probabilities(N, iproportion[cont])[[1]]
Decrease  <- probabilities(N, iproportion[1])[[1]]
Increase  <- probabilities(N, iproportion[1])[[2]]
Reamin    <- probabilities(N, iproportion[1])[[3]]
while(Decrease != 0 && Increase != 0){
time[cont+1] <- time[cont] + dt
Decrease  <- probabilities(N, iproportion[cont])[[1]]
Increase  <- probabilities(N, iproportion[cont])[[2]]
Reamin    <- probabilities(N, iproportion[cont])[[3]]
event <- runif(n = 1)
if(event < Decrease) {iproportion[cont+1] <- iproportion[cont] -1}
if(event > Decrease && event < (Decrease + Increase)) {iproportion[cont+1] <- iproportion[cont] + 1}
if(event > (Decrease + Increase)) {iproportion[cont+1] <- iproportion[cont]}
cont <- cont + 1
}
iproportion
time
plot(time, iproportion)
N <- 50
i <- 40 # Number of individuals with A allele
dt <- 20/N # Assuming a generation time of E. coli
t <- 0
cont <- 1
# Let's define our probabilities
time <- c()
iproportion <- c()
time[1] <- 0
iproportion[1] <- 40
Decrease  <- probabilities(N, iproportion[1])[[1]]
Increase  <- probabilities(N, iproportion[1])[[2]]
Reamin    <- probabilities(N, iproportion[1])[[3]]
while(Decrease != 0 && Increase != 0){
time[cont+1] <- time[cont] + dt
Decrease  <- probabilities(N, iproportion[cont])[[1]]
Increase  <- probabilities(N, iproportion[cont])[[2]]
Reamin    <- probabilities(N, iproportion[cont])[[3]]
event <- runif(n = 1)
if(event < Decrease) {iproportion[cont+1] <- iproportion[cont] -1}
if(event > Decrease && event < (Decrease + Increase)) {iproportion[cont+1] <- iproportion[cont] + 1}
if(event > (Decrease + Increase)) {iproportion[cont+1] <- iproportion[cont]}
cont <- cont + 1
}
plot(time, iproportion)
df <- data.frame(
time = time,
iproportion = iproportion
)
ggplot(data=df, aes(x=time, y=iproportion, group=1)) +
geom_line(linetype = "dashed")+
geom_point()
library(ggplot2)
ggplot(data=df, aes(x=time, y=iproportion, group=1)) +
geom_line(linetype = "dashed")+
geom_point()
ggplot(data=df, aes(x=time, y=iproportion, group=1)) +
geom_line(linetype = "dashed")
ggplot(data=df, aes(x=time, y=iproportion, group=1)) +
geom_line()
ggplot(data=df, aes(x=time, y=iproportion, group=1)) +
geom_line(color="red")
df <- data.frame(
Time = time,
i_proportion = iproportion
)
ggplot(data=df, aes(x=time, y=iproportion, group=1)) +
geom_line(color="red")
df <- data.frame(
Time = time,
i_proportion = iproportion
)
ggplot(data=df, aes(x=Time, y=i_proportion, group=1)) +
geom_line(color="red")
simulationRun <- function(N, iproportion, time, Decrease, Increase, Remain) {
while(Decrease != 0 && Increase != 0){
time[cont+1] <- time[cont] + dt
Decrease  <- probabilities(N, iproportion[cont])[[1]]
Increase  <- probabilities(N, iproportion[cont])[[2]]
Remain    <- probabilities(N, iproportion[cont])[[3]]
event <- runif(n = 1)
if(event < Decrease) {iproportion[cont+1] <- iproportion[cont] -1}
if(event > Decrease && event < (Decrease + Increase)) {iproportion[cont+1] <- iproportion[cont] + 1}
if(event > (Decrease + Increase)) {iproportion[cont+1] <- iproportion[cont]}
cont <- cont + 1
}
return(list(time, iproportion))
}
simulationRun(N = N,  iproportion = iproportion, time = time, Decrease = Decrease, Increase = Increase, Remain = Remain)
as.data.frame(simulationRun(N = N,  iproportion = iproportion, time = time, Decrease = Decrease, Increase = Increase, Remain = Remain))
as.data.frame(simulationRun(N = N,  iproportion = iproportion, time = time, Decrease = Decrease, Increase = Increase, Remain = Remain)  )
s1 <- as.data.frame(simulationRun(N = N,  iproportion = iproportion, time = time, Decrease = Decrease, Increase = Increase, Remain = Remain)  )
s2 <- as.data.frame(simulationRun(N = N,  iproportion = iproportion, time = time, Decrease = Decrease, Increase = Increase, Remain = Remain)  )
s3 <- as.data.frame(simulationRun(N = N,  iproportion = iproportion, time = time, Decrease = Decrease, Increase = Increase, Remain = Remain)  )
s4 <- as.data.frame(simulationRun(N = N,  iproportion = iproportion, time = time, Decrease = Decrease, Increase = Increase, Remain = Remain)  )
s1
s2
quit()
ecoliAnnotation   <- read.table(file = "./data/raw/ecoliAnnotation.tsv", header = TRUE , sep = "\t")
head(ecoliAnnotation)
geneAASeq <- read.table(file = "./data/raw/geneAASeq.tsv", header = FALSE , sep = "\t")
head(geneAASeq)
colnames(geneAASeq)[1] <- "ProteinID"
geneAASeq <- read.table(file = "./data/raw/geneAASeq.tsv", header = FALSE , sep = "\t")
colnames(geneAASeq)[1] <- "ProteinID"
head(geneAASeq)
motifsSeqRelation <- read.table(file = "./data/raw/MotifsSeqRelation.tsv", header = FALSE , sep = "\t")
head(motifsSeqRelation)
motifsSeqRelation <- read.table(file = "./data/raw/MotifsSeqRelation.tsv", header = FALSE , sep = "\t")
colnames(geneAASeq) <- c("TF_name", "Locus_tag", "Motif_dscription", "mSS", "mSE")
#colnames(geneAASeq) <- c("TF_name", "Locus_tag", "Motif_dscription", "mSS", "mSE")
head(motifsSeqRelation)
colnames(motifsSeqRelation) <- c("TF_name", "Locus_tag", "Motif_dEscription", "mSS", "mSE")
motifsSeqRelation <- read.table(file = "./data/raw/MotifsSeqRelation.tsv", header = FALSE , sep = "\t")
colnames(motifsSeqRelation) <- c("TF_name", "Locus_tag", "Motif_dEscription", "mSS", "mSE")
head(motifsSeqRelation)
blastResult <- read.table(file = "./data/raw/Orthologous_ECaaq_RZaadb_blastN_b1_m8.tab", header = TRUE , sep = "\t")
head(blastResult)
tfsEcoli <- read.table(file = "./data/raw/TFs_coli.txt", header = FALSE , sep = "\t")
head(tfsEcoli)
colanmes(tfsEcoli)[1] <- "TF_name"
colnames(tfsEcoli)[1] <- "TF_name"
tfsEcoli <- read.table(file = "./data/raw/TFs_coli.txt", header = FALSE , sep = "\t")
colnames(tfsEcoli)[1] <- "TF_name"
head(tfsEcoli)
QUIT()
quit()
geneAASeq <- read.table(file = "./data/raw/geneAASeq.tsv", header = FALSE , sep = "\t")
colnames(geneAASeq) <- c("ProteinID", "Sequence")
head(geneAASeq)
quit()
quit()
quit()
ecoliAnnotation   <- read.table(file = "./data/raw/ecoliAnnotation.tsv", header = TRUE , sep = "\t")
ecoliAnnotation   <- read.table(file = "../data/raw/ecoliAnnotation.tsv", header = TRUE , sep = "\t")
head(ecoliAnnotation)
quit()
